/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.autoconfigure;

import org.springframework.beans.factory.BeanClassLoaderAware;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.ResourceLoaderAware;

/**
 * 20201215
 * A. 可以在{@code spring.factories}中注册的过滤器，以限制所考虑的自动配置类。 该接口旨在允许甚至在读取自动配置类的字节码之前快速删除它们。
 * B. {@link AutoConfigurationImportFilter}可以实现以下任何{@link org.springframework.beans.factory.Aware Aware}接口，并且它们各自的方法将在{@link #match}
 *    之前调用：
 *    	a. {@link EnvironmentAware}
 *      b. {@link BeanFactoryAware}
 *      c. {@link BeanClassLoaderAware}
 *      d. {@link ResourceLoaderAware}
 */
/**
 * A.
 * Filter that can be registered in {@code spring.factories} to limit the
 * auto-configuration classes considered. This interface is designed to allow fast removal
 * of auto-configuration classes before their bytecode is even read.
 *
 * B.
 * <p>
 * An {@link AutoConfigurationImportFilter} may implement any of the following
 * {@link org.springframework.beans.factory.Aware Aware} interfaces, and their respective
 * methods will be called prior to {@link #match}:
 *
 * <ul>
 * a.
 * <li>{@link EnvironmentAware}</li>
 *
 * b.
 * <li>{@link BeanFactoryAware}</li>
 *
 * c.
 * <li>{@link BeanClassLoaderAware}</li>
 *
 * d.
 * <li>{@link ResourceLoaderAware}</li>
 * </ul>
 *
 * @author Phillip Webb
 * @since 1.5.0
 */
// 20201215 "spring.factories"过滤器: 以限制所考虑的自动配置类。 该接口旨在允许甚至在读取自动配置类的字节码之前快速删除它们
@FunctionalInterface
public interface AutoConfigurationImportFilter {

	/**
	 * // 20201215 将过滤器应用于给定的自动配置类候选对象。
	 * Apply the filter to the given auto-configuration class candidates.
	 * @param autoConfigurationClasses the auto-configuration classes being considered.
	 * This array may contain {@code null} elements. Implementations should not change the
	 * values in this array. // 20201215 正在考虑的自动配置类。 该数组可以包含{@code null}元素。 实现不应更改此数组中的值。
	 * @param autoConfigurationMetadata access to the meta-data generated by the
	 * auto-configure annotation processor
	 * @return a boolean array indicating which of the auto-configuration classes should
	 * be imported. The returned array must be the same size as the incoming
	 * {@code autoConfigurationClasses} parameter. Entries containing {@code false} will
	 * not be imported. // 20201215 访问自动配置注释处理器生成的元数据返回一个布尔数组，该布尔数组指示应导入哪些自动配置类。 返回的数组的大小必须与传入的
	 *                     {@code autoConfigurationClasses}参数的大小相同。 包含{@code false}的条目将不会导入。
	 */
	// 20201215 将过滤器应用于给定的自动配置类候选对象 -> 返回匹配的结果
	boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);

}
